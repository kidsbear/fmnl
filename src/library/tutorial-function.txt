` Functions can be applied to lists.
function <double>(1) = 11
export function <doubled>(1) = <double>(12345-) ` = 112233445-5-

` You may notice that the note duplicated,
`  rather than repeating the whole melody like (12345-)*
` That's because that function is defined for notes.
` When that function is applied on a list, it's applied to every note inside sequentially.

` One great use of function is to transpose.
` Applying the following function once would transpose C scale into F scale.
function <1-4>(1) = 4
export function <transposed>(1) = <1-4>(1234567/1) ` = 456b7123

` The body of function can also be lists. In fact they can be any ELEMENTs.
function <M>(1) = (1, 3, 5)
export function <chordified>(1) = <M>(12345-)

` So far all functions have one argument.
` Functions may also have multiple arguments, like a list.
function <concat2>(A, B) = (-AB)

` Such functions are applied to list of the same size.
export function <concatenated>(1) = <concat2>(135, /1/3/5)

` If list size doesn't match, function will be dispatched inside
`  until it finds a matching one
export function <concatenated2>(1) = <concat2>((1,5), (/1,/5), (\1,\5)) ` = (15, /1/5, \1\5)

` Functions are the core of this language. See the examples and try it yourself!